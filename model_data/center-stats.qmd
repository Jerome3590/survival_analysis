---
title: "Center Level Statistics"
format:
  html:
    toc: true
    toc-depth: 5
    code-fold: true
    code-summary: "Code"
    code-tools: true
    # self-contained: true
    # embed-resources: true
    df-print: paged
theme: lumen 
---


This notebook generates listing center refusal data. 

The required input files are:

- `data/throacic.rds`
- `data/cand_wl_hist.rds`
- `data/PTR.rds`

The outputs are:

- `data/refusals.csv`

## Settings and Functions {.hidden .unnumbered .unlisted}

```{r packages}
#| include: false
library(tidyverse)
```


```{r setup}
#| include: false
library(tidyverse)
knitr::opts_chunk$set(
  echo = TRUE,
  out.width = "60%", fig.width=8, fig.height=6,
  attr.output='style="max-height: 200px;"', # vertical scroll box
  skimr_include_summary = FALSE
)
options(knitr.kable.NA = '') # set missing table values to blank
options(width = 90)
theme_set(theme_bw())
```

## Load all required data 
```{r load-all}
#| include: false
dir_data = "data"
PTR_all = read_rds(file.path(dir_data, "PTR.rds"))
WL_hist = read_rds(file.path(dir_data, "cand_wl_hist.rds"))
thoracic = read_rds(file.path(dir_data, "thoracic.rds"))
```


## Refusal statistics 

### Join waitlist data to PTR
```{r add-waitlist-data-to-PTR}
#| cache: true
#| dependson: "load-all"

#: Get waitlist status and waitlist organ at time of match run
WL_STATUS = 
  PTR_all %>% select(PTR_ID, WL_ID_CODE, MATCH_SUBMIT_DT) %>%
  left_join(
    WL_hist, 
    join_by(WL_ID_CODE, closest(MATCH_SUBMIT_DT > CHG_DT ))
  ) %>% 
  select(PTR_ID, ORG_CAND = ORG, STATUS_AT_OFFER = STATUS)


#: get date candidate added to waitlist
#   This should match thoracic$INIT_DATE and INIT_STAT
#   there are only a handful of cases where INIT_DATE < WL_DATE (mostly  < 2004)
cand_listed_date = 
  WL_hist %>%
  filter(CHG_TY == "A") %>%          # date activated on waitlist
  distinct() %>%
  transmute(
    WL_ID_CODE, 
    WL_DATE = as.Date(CHG_DT), 
    STATUS_AT_LISTING = STATUS
  )

#: add data to PTR 
PTR = PTR_all %>% 
  # add PT_CODE, ORG_CAND, and STATUS_CAND to PTR
  left_join(WL_STATUS, by="PTR_ID") %>%  
  # add data candidate placed on waitlist
  left_join(cand_listed_date, by = "WL_ID_CODE")  


#----------------------------------------------------------------------------#
## Make offer data ----
#  NOTES: 
#   - ONLY offers from DONORS < 30 years old are included! 
#   - Candidates < 18; on HR waitlist (not HL)
#   - Candidates added to waitlist between 2010 and 2019
#   - Our offer data is from 2010-march 2021, so there will be some
#     candidates still on waitlist at march 2021. 
#----------------------------------------------------------------------------#

offers = PTR %>% 
  # add year and if offered donor was eventually utilized
  mutate(
    MATCH_RUN_YEAR = format(MATCH_SUBMIT_DT, "%Y"),
    donor_utilized = ifelse(is.na(MAX_ACCEPT_SEQ), 0, 1)
  ) %>% 
  # get population of interest
  filter(
    AGE_PT < 18,        # Pediatric Candidate
    ORG_CAND == "HR",   # Candidate only on HR waitlist (not HL)
    WL_DATE >= as.Date("2010-01-01"), # listed after 2010 (so we have offer data)
    WL_DATE <= as.Date("2019-12-31"), # listed before 2020
  ) %>% 
  select(
    PTR_ID, WL_ID_CODE, LISTING_CTR_CODE, DONOR_ID,
    AGE_PT, ORG_CAND, STATUS_AT_OFFER, STATUS_AT_LISTING,
    WL_DATE,
    MATCH_SUBMIT_DT, MATCH_RUN_YEAR,
    INITIAL_RESPONSE_DT, 
    OFFER_ACCEPT, PTR_SEQUENCE_NUM,
    donor_utilized
  )

```


## Estimate Median Number of Refusals 

We have, for each waitlist, the number of times a donor was refused. However, there can be censoring due to the candidate being removed from the waitlist before an offer is accepted.

The approach is to model the number of refusals before acceptance in a survival analysis setting. Specifically, we are using a Kaplan-Meier estimator (by `LISTING_CTR_CODE`) to estimate the *median number of refusals per candidate*. 


Notes: 

- We use a pseudo-bayesian approach to help estimatation for centers with few candidates. We take the aggregate known (uncensored) n_refusals and treat as additional data before fitting a KM. 

- We are not controlling/adjusting for candidate status, size, etc. We could by moving to a cox-ph or e.g., only using status 1A, etc. 


### Offer and Refusal data for each waitlist (in population)


The `n_refusals` is the outcome and `accept` is the event/censoring indicator. 

```{r refusals_WL}
refusals_WL = 
  offers %>% 
  group_by(WL_ID_CODE, LISTING_CTR_CODE, STATUS_AT_LISTING) %>% 
    summarize(
      n_offers = n_distinct(DONOR_ID),
      accept = any(OFFER_ACCEPT == "Y"),
      n_refusals = n_offers - accept,
      .groups = "drop"
    )
```


### Set-up "prior" data
```{r KM-prior}

#: number of pseudo observations
k = 3

#: create pseudo observations; use frequency weighting w
prior = 
  refusals_WL %>% 
  filter(accept) %>% 
  count(n_refusals) %>% 
  mutate(w = k*n/sum(n), accept=TRUE)

#: replicate for all LISTING_CTR_CODES
LC = refusals_WL$LISTING_CTR_CODE %>% unique
prior_df = 
  map(LC,\(x) prior %>% mutate(LISTING_CTR_CODE = x)) %>% 
  bind_rows()

#: Data for modeling
data_KM = 
  bind_rows(
    refusals_WL %>% mutate(w=1), # set weights = 1 for original data
    prior_df                     # add on the pseudo observations
  )
```



### Fit the KM model 

Use fitted KM to estimate median and mean number of refusals before acceptance: 

```{r KM-fit}
library(survival)
KM_fit = survfit(Surv(n_refusals, accept) ~ LISTING_CTR_CODE, 
                 data = data_KM, 
                 weight = w) 

refusals_KM = 
  summary(KM_fit)$table %>% 
  as_tibble(rownames = "LISTING_CTR_CODE") %>% 
  transmute(
    LISTING_CTR_CODE = str_remove(LISTING_CTR_CODE, "LISTING_CTR_CODE="),
    # records, 
    # n = n.max - k, 
    # events = events - k, 
    refusals_mean = rmean, 
    refusals_median = median
  )

```

### Save Data

- `n_candidates`: number of candidates listed at center
- `median_refusals`: median number of offer refusals per candidate
- `median_refusals_old`: the original, biased, estimation that didn't account for censoring or small sample sizes
- `mean_refusals`: mean number of offer refusals per candidate
- `n_{offers, refusals}`: number of offers/refusals at center

```{r save-refusal-data}
refusals = refusals_WL %>% 
  group_by(LISTING_CTR_CODE) %>% 
    summarize(
      n_candidates = n_distinct(WL_ID_CODE),
      median_refusals_old = median(n_refusals),
      n_offers = sum(n_offers),
      n_refusals = sum(n_refusals),
      p_refusals = n_refusals / n_offers,
      # n_tx = sum(accept),
      # p_tx = mean(accept)
    ) %>% 
  ungroup() %>% 
  left_join(
    refusals_KM %>% 
      rename(
        median_refusals = refusals_median, 
        mean_refusals = refusals_mean
      ), 
    by = "LISTING_CTR_CODE"
  )

refusals %>% write_csv("data/refusals.csv")
```

```{r}
refusals %>% 
  mutate(LISTING_CTR_CODE = sample(nrow(.))) # obscure listing center 
```


