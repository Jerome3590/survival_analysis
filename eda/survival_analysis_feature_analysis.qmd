---
title: "Survival Model - Feature Analysis"
author: "R. Jerome Dixon"
date: "`r format(Sys.Date(), '%B %d, %Y')`"
format: 
  html: 
    toc: true
    toc-depth: 5
    code-fold: true
    code-summary: "Show the code"
    embed-resources: true
    default-image-extension: svg
    dpi: 600
---

```{r load-libraries}
#| echo: true
#| warning: false
#| message: false
#| results: hide

library(here)
library(dplyr)
library(readr)
library(magrittr)
library(spatstat)
library(tibble)
library(purrr)
library(tidyverse)
library(huxtable)
library(reticulate)
library(tidymodels)
library(ggplot2)
library(gridExtra)

(options)(scipen=999)

theme_smooth = list(
  theme_bw(base_size = 14),
  scale_y_continuous(breaks = seq(0, 1, by = .02)), # set y-axis ticks
  coord_cartesian(ylim = c(0, .25)),                # set y-axis limits
  labs(y = "Pr(Waitlist Mortality | X)")            # set y-axis label
)

# color settings:
col_outcome = c(`0` = "#0C7BDC", `1` = "#FFC20A")  # colors for rug
default = list(
  fill = "azure4",     
  line = "black", 
  alpha = .40
)

```

### Survival Model Dataset

```{r load-dataset}
#| echo: true
#| warning: false
#| message: false
#| eval: true

set.seed(1997)

survival_model <- read_rds(here("data","survival_analysis.rds"))

survival_model %<>%
  mutate_if(is.character, as.factor) 
 
survival_model %>% 
  str()


```

#### Format Dataset

```{r format-dataset}
#| echo: true
#| warning: false
#| message: false
#| eval: true

library(forcats)

survival_model %<>%
  mutate(INIT_STAT = as.factor(INIT_STAT)) %>%
  mutate(INOTROPES_TCR = as.factor(INOTROPES_TCR)) %>%
  mutate(ECMO_TCR = as.factor(ECMO_TCR)) %>%
  mutate(LIFE_SUP_TCR = as.factor(LIFE_SUP_TCR)) %>%
  mutate(PGE_TCR = as.factor(PGE_TCR)) %>%
  mutate_if(is.factor, ~fct_na_value_to_level(., "Unknown")) %>% 
  select(-c(TRANSFUSIONS_CAND, days_total))


survival_model %>% 
  str()

```

The blank values (NAs) mean there is no removal code, so the candidates are still on waitlist at time of data collection (2022-04-01). We remove these.

```{r}

survival_model %<>%
  filter(!is.na(outcome_final))

survival_model %>% 
  str()

```

#### Dataset Feature Columns

```{r}
#| echo: true
#| warning: false
#| message: false
#| eval: true

model_cb <- survival_model %>% 
  select(!c(WL_ID_CODE, PT_CODE, LISTING_CTR_TYPE, LISTING_CTR, ECMO_CAND_REG, LISTING_CTR_TX_COUNT))

features_cb <- model_cb %>% 
  select(-outcome_final)

target_cb <- model_cb$outcome_final

predictors <- names(features_cb) 

cat_features <- names(features_cb)[sapply(features_cb, is.factor)]

num_features <- names(features_cb)[sapply(features_cb, function(x) is.numeric(x) || is.integer(x))]


```

#### Train and Test Splits

```{r warning=FALSE, message=FALSE}

library(caret)

set.seed(1997) # Setting seed for reproducibility
splitIndex <- createDataPartition(model_cb$outcome_final, p = 0.8, 
                                  list = FALSE, 
                                  times = 1)

# Training set
trainSet <- model_cb[splitIndex, ]

# Test set
testSet <- model_cb[-splitIndex, ]

```


```{r}

trainSet %>% 
  count(outcome_final) %>% 
  mutate(Data = "Training") %>% 
  bind_rows(
    testSet %>% 
      count(outcome_final) %>% 
      mutate(Data = "Testing")
  ) %>% 
  spread(outcome_final, n)

```

##### Missing Data

```{r}

sum(is.na(trainSet[num_features]))

```


```{r warning=FALSE, message=FALSE}

library(DataExplorer)

plot_missing(trainSet)

```
### Numerical Feature Importance - Odds Ratio

```{r regression-coefficients, warning=FALSE, message=FALSE}

library(recipes)
library(broom)

risk_train <- recipe(outcome_final ~ ., data = trainSet) %>%
  step_center(all_of(num_features)) %>%
  step_scale(all_of(num_features)) %>%
  step_YeoJohnson(all_of(num_features)) %>%
  prep() %>%
  juice()

risk_train_unnormalized <- recipe(outcome_final ~ ., data = trainSet) %>%
  prep() %>%
  juice()

# Selecting only the numeric predictors, excluding the outcome and categorical features
risk_train_processed <- risk_train %>%
  select(-one_of(c("outcome_final", cat_features)))

# Fitting logistic regression models for each numeric predictor and extracting coefficients
models <- lapply(names(risk_train_processed), function(predictor) {
  formula <- as.formula(paste("outcome_final ~", predictor))
  model <- glm(formula, data = risk_train, family = "binomial")
  tidy(model)
})

# Extracting coefficients and the predictor names using the suggested syntax
coefficients_df <- data.frame(
  Predictor = sapply(models, function(x) x[["term"]][2]),
  Coefficient = sapply(models, function(model) {
    coef <- model %>% filter(term == model$term[2]) %>% .$estimate
    if (length(coef) == 0) NA else coef
  })
)

# Printing the data frame
print(coefficients_df)

```


```{r numerical-summary, warning=FALSE, message=FALSE}

library(broom)

# Fit logistic regression models for each numeric predictor and calculate odds ratios
odds_ratios <- lapply(names(risk_train_processed), function(predictor) {
  formula <- as.formula(paste("outcome_final ~", predictor))
  model <- glm(formula, data = risk_train, family = "binomial")
  coef_summary <- tidy(model)
  
  # Calculate odds ratio for the predictor
  coef_summary %>%
    filter(term == predictor) %>%
    mutate(odds_ratio = exp(estimate)) %>%
    select(term, odds_ratio)
}) %>%
  bind_rows() %>%
  na.omit() # Combine results and remove any NAs

# Add a column to indicate the distance from 1 (for coloring)
odds_ratios$distance_from_one <- abs(odds_ratios$odds_ratio - 1)

# Plot the odds ratios with color scale
ggplot(odds_ratios, aes(x = reorder(term, odds_ratio), y = odds_ratio, fill = distance_from_one)) +
  geom_bar(stat = "identity") +
  scale_fill_gradient(low = "blue", high = "lightblue",
                      guide = guide_legend(reverse = FALSE),
                      name = "Distance from 1") +
  coord_flip() + # Flip coordinates for easier reading
  theme_minimal() +
  labs(x = "Predictor", y = "Odds Ratio",
       title = "Association of Numeric Predictors with Binary Outcome",
       subtitle = "Odds ratios from logistic regression") +
  geom_hline(yintercept = 1, linetype = "dashed", color = "red") + # Reference line at odds ratio = 1
  theme(legend.position = "right")


```

#### Additional Numerical Plots

```{r warning=FALSE, message=FALSE}

risk_train2 <- recipe(outcome_final ~ ., data = trainSet) %>%
  prep() %>%
  juice()

# Calculate the baseline outcome rate for the entire dataset
base_p <- mean(risk_train2$outcome_final == 1)

numeric_plots <- lapply(num_features, function(feature) {
  # Generate the plot
  plt <- ggplot(risk_train2, aes_string(x = feature, y = "outcome_final")) +
    geom_hline(yintercept = base_p, linetype = "dashed", color = "grey50") +
    geom_smooth(method = "gam", method.args = list(family = "binomial"), 
                formula = y ~ s(x, bs = "cs"), 
                fill = default$fill, color = default$line, alpha = default$alpha) +
    geom_rug(data = risk_train2 %>% filter(outcome_final == 1), aes_string(x = feature), sides = "t", color = col_outcome["1"]) + 
    geom_rug(data = risk_train2 %>% filter(outcome_final == 0), aes_string(x = feature), sides = "b", color = col_outcome["0"]) +
    labs(title = paste("Association between", feature, "and Binary Outcome"),
         x = feature, y = "Probability of Outcome = 1") +
    theme_bw(base_size = 14) +
    scale_y_continuous(breaks = seq(0, 1, by = .02)) +
    coord_cartesian(ylim = c(0, .25)) +
    labs(y = "Pr(Waitlist Mortality | X)")

  # Add missing value component if applicable
  if(sum(is.na(risk_train2[[feature]])) > 5) {
    d <- risk_train2 %>% filter(!is.na(.data[[feature]])) %>% pull(.data[[feature]])
    width <- diff(range(d)) * .05 / 2
    x <- min(d) - 2 * width
    missing_df <- risk_train2 %>% 
      filter(is.na(.data[[feature]])) %>% 
      summarize(
        x = x, width = width,
        n = n(), 
        n1 = sum(outcome_final), 
        a = n1 + base_p * 5,
        b = n - n1 + (1 - base_p) * 5,
        p = a / (a + b),
        lower = qbeta(0.025, a, b),
        upper = qbeta(0.975, a, b),
        moe = upper - lower
      )

    plt <- plt + 
      geom_tile(data = missing_df, aes(x = x, y = p, width = width, height = moe), 
                fill = default$fill, alpha = default$alpha) + 
      geom_segment(data = missing_df, color = default$line, 
                   aes(x = x - width / 2, xend = x + width / 2, y = p, yend = p)) + 
      annotate("text", x = missing_df$x, y = 0, label = "Missing", color = "black", 
               angle = -90, hjust = 1)
  }
  
  plt
})

numeric_plots

```

### Categorical Features - Cramér's V

```{r categorical-summary, warning=FALSE, message=FALSE}

library(lsr) # For Cramér's V calculation

# Ensure binary outcome variable is a factor with two levels
trainSet$outcome_final <- factor(trainSet$outcome_final)

# Check and remove categorical predictors with less than two levels
valid_cat_features <- sapply(trainSet[cat_features], function(x) length(unique(x)) > 1)
filtered_cat_features <- cat_features[valid_cat_features]

# If any predictors were filtered out, you might want to know which ones
cat_features[!valid_cat_features]

# Compute Cramér's V using the filtered set of categorical predictors
associations <- sapply(filtered_cat_features, function(predictor) {
  cramersV(trainSet[[predictor]], trainSet[["outcome_final"]], correct = FALSE)
})

# Create a dataframe for plotting
association_data <- data.frame(
  Predictor = names(associations),
  CramersV = associations
)

# Enhanced Plot
ggplot(association_data, aes(x = reorder(Predictor, CramersV), y = CramersV, fill = CramersV)) +
  geom_bar(stat = "identity") +
  coord_flip() + # For horizontal bars
  scale_fill_gradient(low = "lightblue", high = "blue", name = "Cramér's V") +
  labs(x = "Predictor", y = "Cramér's V", 
       title = "Association with Target Outcome") +
  theme_minimal() +
  theme(legend.position = "bottom")


```

#### Additional Categorical Plots

```{r warning=FALSE, message=FALSE}

library(forcats) # For fct_lump_n and fct_explicit_na

base_p <- mean(risk_train$outcome_final == 1)
k <- 5 # Smoothing strength

categorical_plots <- lapply(cat_features, function(feature) {
  feature_sym <- sym(feature)
  
  # Prepare the dataframe
  risk_train_modified <- risk_train %>%
    mutate(
      !!feature_sym := as.character(!!feature_sym), 
      !!feature_sym := str_trunc(!!feature_sym, width = 30, side = "right"),
      !!feature_sym := fct_lump_n(!!feature_sym, n = 15, other_level = "All Others"),
      !!feature_sym := as_factor(!!feature_sym) %>% fct_explicit_na(na_level = "Missing")
    )
  
  # Calculate proportions and confidence intervals
  data_for_plot <- risk_train_modified %>%
    ungroup() %>%
    count(!!feature_sym, outcome_final) %>%
    spread(key = outcome_final, value = n, fill = 0L) %>%
    mutate(
      total = `0` + `1`,
      proportion = `1` / total,
      a = `1` + base_p * k,
      b = `0` + (1 - base_p) * k,
      p = a / (a + b),
      lower = qbeta(0.025, a, b),
      upper = qbeta(0.975, a, b)
    )
  
  # Generate the plot
  plt <- ggplot(data_for_plot, aes(x = !!feature_sym, y = p)) +
    geom_hline(yintercept = base_p, linetype = "dashed", color = "grey50") +
    geom_pointrange(aes(ymin = lower, ymax = upper)) +
    scale_y_continuous(
    breaks = seq(0, 1, by = .02), 
    labels = scales::percent_format(),
    limits = c(0, .25)
  ) +
    labs(title = paste("Association between", feature, "and Binary Outcome"),
         x = feature, y = "Probability of Outcome = 1") +
    theme_bw(base_size = 14) +
    theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 1)) +
    scale_y_continuous(breaks = seq(0, 1, by = .02)) +
    coord_cartesian(ylim = c(0, .25)) +
    labs(y = "Pr(Waitlist Mortality | X)")
  
  # Check if axis labels need rotation based on character length
  feature_levels <- risk_train_modified %>% pull(!!feature_sym) %>% unique() %>% as.character()
  nx <- max(nchar(feature_levels))
  if (nx > 80) {
    plt <- plt + theme(axis.text.x = element_text(angle = -45, hjust = 0))
  }
  
  return(plt)
})


categorical_plots

```



